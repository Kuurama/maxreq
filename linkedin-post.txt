Multi-Language API Server Performance Comparison.


Context : compare API server performance for simple database requests.

I'm talking about web development, only API.


Using AI, I created 8 identical API projects along with a benchmark client to evaluate the request-handling capacity of each server. The test scenario benchmarks a POST request with JSON payload and JSON response, simulating a small identification payload. Each request triggers a SQLite query to retrieve the corresponding data.


The server specs are: AMD Ryzen 7 2700X (8 cores, 16 threads) running Windows 10.


Results for 100,000 requests with 16 concurrent connections:

  Rust: 17,887 req/s – Zero-cost abstractions deliver maximum speed

  Go: 12,049 req/s – Excellent balance of performance and simplicity

  C#/.NET: 7,417 req/s – Strong enterprise-grade performance

  C++: 5,652 req/s – Fast but not recommended for web APIs

  Java: 4,527 req/s – JVM optimization pays off

  Python: 2,112 req/s – FastAPI surprises with strong async capabilities

  Node.js: 2,076 req/s – V8 engine delivers decent async performance

  PHP: 1,227 req/s – Traditional, adequate for standard web apps


This shows a performance disparity of up to 14.5x depending on the technology choice.

Production costs will be significantly higher due to lower throughput. 

Is it justifiable to choose technologies that consume more resources for the same functionality? 

Consider the reduction in server count possible with higher-performance alternatives.


With today’s AI tools, migrating functionality between technologies is becoming easier.


The github repo to evaluate the code.

https://github.com/iso8859/maxreq